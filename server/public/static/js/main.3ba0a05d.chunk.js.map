{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","services/AuthService.js","services/PartyService.js","components/Home/Home.js","components/Login/Login.js","components/Create/CreateName/CreateName.js","components/Create/CreateEvent/CreateEvent.js","services/SpotifyService.js","components/Create/Party/Party.js","components/Create/Edit/Edit.js","components/Create/Create.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Component","Footer","target","rel","href","AuthService","loggedin","service","get","then","response","data","logout","this","axios","create","baseURL","withCredentials","PartyService","getAllParties","getPartyDetails","id","createParty","party","post","updateParty","put","deleteParty","delete","Home","props","authService","setState","loggedInUser","getUserParties","partyService","allParties","userParties","filter","user","state","_id","updateAccessToken","newState","map","userToken","token","Fragment","onClick","spotifyID","toUpperCase","src","photo","alt","username","length","idx","key","image_url","name","Login","icon","faSpotify","size","CreateName","htmlFor","onChange","e","updateName","type","placeholder","handleCreatePlaylist","CreateEvent","updateAddress","updateAddressDetails","handleCreateParty","SpotifyService","createPlaylist","playlistDetails","accessToken","myHeaders","headers","searchSongs","query","addSongToPlaylist","song","playlist","songToAdd","addSongToQueue","body","Party","partyID","window","location","split","foundedSongs","addedSong","spotifyService","foundedParty","value","tracks","items","document","querySelector","faEdit","faTrashAlt","address","faMapMarker","addressDetails","faShareAlt","encodeURI","faWhatsapp","faFacebook","album","images","url","addSong","uri","artists","Edit","field","_","history","push","saveChanges","Create","min","max","Math","floor","random","public","collaborative","description","createdPlaylist","createdParty","extact","path","render","withRouter","App","authservice","fetchUser","catch","err","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.3ba0a05d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.scss\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n        <header className=\"Header\">\n      <Link to=\"/\">\n          <h1>SPartyTime</h1>\n      </Link>\n        </header>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Footer.scss\";\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <footer className=\"Footer\">\n        <p>\n          Developed at Ironhack by{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://www.linkedin.com/in/jcarlosmateo/\"\n          >\n            Jota\n          </a>\n        </p>\n      </footer>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class AuthService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `https://spartytime.herokuapp.com/api/auth`,\n            withCredentials: true\n        });\n    }\n\n    loggedin = () => {\n        return this.service.get('/currentUser', )\n            .then(response => response.data)\n    };\n\n    logout = () => {\n        return this.service.get('/logout', )\n            .then(response => response.data)\n    };\n};","import axios from \"axios\";\n\nexport default class PartyService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `https://spartytime.herokuapp.com/api/parties`,\n            withCredentials: true\n        });\n    }\n    getAllParties = () => {\n        return this.service.get('/all', )\n        .then(response => response.data)\n    };\n\n    getPartyDetails = (id) => {\n        return this.service.get('/' + id, )\n        .then(response => response.data)\n    };\n\n    createParty = (party) => {\n        return this.service.post('/create', party)\n        .then(response => response.data)\n    }\n\n    updateParty = (id, party) => {\n        return this.service.put('/' + id, party)\n        .then(response => response.data)\n    }\n\n    deleteParty = (id) => {\n        return this.service.delete('/' + id, )\n        .then(response => response.data)\n    }\n}","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport PartyService from \"../../services/PartyService\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport \"./Home.scss\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      userParties: []\n    };\n    this.partyService = new PartyService();\n    this.authService = new AuthService();\n  }\n  logout = () => {\n    this.authService.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  getUserParties = () => {\n    this.partyService.getAllParties().then(allParties => {\n      this.setState(\n        {\n          userParties: allParties.filter(\n            party => party.user === this.state.loggedInUser._id\n          )\n        },\n        this.updateAccessToken()\n      );\n    });\n  };\n\n  updateAccessToken() {\n    let newState = { ...this.state };\n    newState.userParties = newState.userParties.map(\n      party => (party.userToken = newState.loggedInUser.token)\n    );\n    this.setState(newState);\n  }\n\n  componentDidMount() {\n    this.getUserParties();\n  }\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <React.Fragment>\n          <button className=\"Logout\" onClick={() => this.logout()}>\n            Log Out x\n          </button>\n          <section className=\"Home\">\n            <div className=\"dashboard\">\n              <div className=\"userInfo\">\n                <h2>\n                  {\" \"}\n                  Welcome, {this.state.loggedInUser.spotifyID.toUpperCase()}\n                </h2>\n                <img\n                  src={this.state.loggedInUser.photo}\n                  alt={this.state.loggedInUser.username}\n                />\n              </div>\n              {this.state.userParties.length !== 0 ? (\n                <p className=\"parties\">\n                  Check your Sparties (Total: {this.state.userParties.length})\n                </p>\n              ) : (\n                <p className=\"parties\">You haven't active Sparties</p>\n              )}\n              <div className=\"partiesSlider\">\n                {this.state.userParties.map((party, idx) => {\n                  return (\n                    <Link to={\"/party/\" + party._id} key={idx}>\n                      <div className=\"partyIcon\">\n                        <img src={party.image_url} alt={party.name} />\n                        <h5>{party.name}</h5>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </div>\n            </div>\n            <div className=\"newSparty\">\n              <Link to=\"/party/name\">\n                <button>\n                  <h2>New Sparty</h2>\n                </button>\n              </Link>\n            </div>\n          </section>\n        </React.Fragment>\n      );\n    } else {\n      return <Redirect to=\"/\" />;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport \"./Login.scss\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpotify } from '@fortawesome/free-brands-svg-icons'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.service = new AuthService();\n  }\n\n  render() {\n    return (\n      <section className=\"Login\">\n        <div className=\"LoginBox\">\n          <a className=\"spotifyButton\"href={`https://spartytime.herokuapp.com/api/auth/spotify`}>\n          <FontAwesomeIcon className=\"icon\" icon={ faSpotify } size=\"2x\"/>Log In with Spotify\n          </a>\n          <p>* Remember, you will need a Spotify Premium account to use SPartyTime</p>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./CreateName.scss\";\n\nexport default class CreateName extends Component {\n  render() {\n    return (\n      <section className=\"CreateName\">\n        {this.props.party.name === \"\" ? (\n          <h2>New Sparty</h2>\n        ) : (\n          <h2>{this.props.party.name}</h2>\n        )}\n        <label htmlFor=\"name\">Enter a name for your Sparty!</label>\n        <input\n          onChange={e => this.props.updateName(e)}\n          type=\"text\"\n          placeholder=\"New Sparty\"\n        />\n        <Link to=\"/party/event\">\n          <button className=\"nextButton\" onClick={() => this.props.handleCreatePlaylist()}>\n            <h5>Next</h5>\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport \"./CreateEvent.scss\";\n\nexport default class CreateEvent extends Component {\n  render() {\n    return (\n      <section className=\"CreateEvent\">\n        {this.props.party ? (\n          <h2>{this.props.party.name}</h2>\n        ) : (\n          <h2>New Party</h2>\n        )}\n        <label htmlFor=\"googleAddress\">Main address:</label>\n        <input type=\"search\" onChange={e => this.props.updateAddress(e)} />\n        <label htmlFor=\"addressDeatails\">Address Details:</label>\n        <input\n          onChange={e => this.props.updateAddressDetails(e)}\n          type=\"text\"\n          placeholder=\"Portal, floor, door,...\"\n        />\n          <button className=\"nextButton\" onClick={() => this.props.handleCreateParty()}>\n            <h5>Create</h5>\n          </button>\n      </section>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class SpotifyService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `https://api.spotify.com/v1/`\n    });\n  }\n\n  createPlaylist = (playlistDetails, user, accessToken) => {\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    return this.service\n      .post(`users/${user}/playlists`, playlistDetails, {\n        headers: myHeaders\n      })\n      .then(response => response.data);\n  };\n\n  searchSongs = (query, accessToken) => {\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    return this.service\n      .get(`search?q=${query}&type=track&limit=20`, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n  addSongToPlaylist = (song, playlist, accessToken, user) => {\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    const songToAdd = {\n      \"uris\": [song]\n    }\n\n    this.service\n      .post(`users/${user}/playlists/${playlist}/tracks`, songToAdd, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n  addSongToQueue = (song, accessToken) => {\n\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n\n    const body = {}\n    this.service\n      .post(`me/player/queue?uri=${song}`, {\n        body: body\n      }, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n\n}\n\n\n// Esta es la megapetición a axios que se trabajó con Dani, puede que tenga que usarse para\n// refrescar el token y mantener la sesión activa más de una hora\n\n// test() {\n//   axios\n//     .post(\n//       \"https://accounts.spotify.com/api/token\",\n//       querystring.stringify({\n//         grant_type: \"authorization_code\",\n//         code: window.location.href.split(\"code=\")[1],\n//         redirect_uri: `${process.env.REACT_APP_URL}/home/callback`\n//       }),\n//       {\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//           Authorization:\n//             \"Basic YjZiNWExOTRlNmQzNDk2MWIxMjQwZmZjOWQzN2E5MWY6OWQyNzg3M2EwZWEwNGU5NzhjZTRiYTkyZTNjNWI0OTc=\"\n//         }\n//       }\n//     )\n//     .then(tokenData => {\n//       console.log(tokenData);\n\n//     });\n// }\n// ---------------------------------------------------------","import React, { Component } from \"react\";\nimport \"./Party.scss\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Link } from \"react-router-dom\";\nimport SpotifyService from \"../../../services/SpotifyService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faWhatsapp } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSpotify } from \"@fortawesome/free-brands-svg-icons\";\nimport { faMapMarker } from \"@fortawesome/free-solid-svg-icons\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faShareAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default class Party extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1],\n      foundedSongs: [],\n      addedSong: false\n    };\n\n    this.partyService = new PartyService();\n    this.spotifyService = new SpotifyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty })\n      );\n  }\n\n  searchSongs(e) {\n    if (e.target.value === \"\")\n      return this.setState({ ...this.state, foundedSongs: [] });\n    this.spotifyService\n      .searchSongs(e.target.value, this.state.party.userToken)\n      .then(foundedSongs =>\n        this.setState({\n          ...this.state,\n          foundedSongs: foundedSongs.tracks.items,\n          addedSong: false\n        })\n      );\n  }\n  addSong(song) {\n    this.spotifyService.addSongToQueue(song, this.state.party.userToken);\n\n    this.spotifyService.addSongToPlaylist(\n      song,\n      this.state.party.playlist,\n      this.state.party.userToken,\n      this.state.party.user\n    );\n    let newState = {\n      ...this.state\n    };\n    newState.addedSong = true;\n    newState.foundedSongs = [];\n\n    this.setState(newState);\n    document.querySelector(\"input\").value = \"\";\n  }\n\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n\n  render() {\n    if (this.state.party && this.state.loggedInUser) {\n      if (this.state.loggedInUser._id === this.state.party.user) {\n        return (\n          <section className=\"Party\">\n            <nav>\n              <button className=\"no-bg\">\n                <Link to=\"/home\">⇦ Back</Link>\n              </button>\n              <button className=\"no-bg\">\n                <Link to={\"/party/\" + this.state.party._id + \"/edit\"}>\n                  <FontAwesomeIcon className=\"icon\" icon={faEdit} size=\"1x\" />\n                  Edit\n                </Link>\n              </button>\n              <button\n                className=\"no-bg delete\"\n                onClick={() => this.props.deleteParty(this.state.partyID)}\n              >\n                <FontAwesomeIcon className=\"icon\" icon={faTrashAlt} size=\"1x\" />\n                Delete\n              </button>\n            </nav>\n            <h1 className=\"spartyName\">{this.state.party.name}</h1>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={\n                \"https://www.google.com/maps/search/\" + this.state.party.address\n              }\n              className=\"spartyDetails\"\n            >\n              <FontAwesomeIcon className=\"icon\" icon={faMapMarker} size=\"1x\" />:{\" \"}\n              <span>\n                {this.state.party.address}. {this.state.party.addressDetails}.\n              </span>\n            </a>\n            <div className=\"buttonContainer\">\n              <a\n                className=\"spotifyButton\"\n                href={\"spotify:playlist:\" + this.state.party.playlist}\n              >\n                <FontAwesomeIcon className=\"icon\" icon={faSpotify} size=\"1x\" />\n                Check playlist\n              </a>\n              <div className=\"socialShare\">\n                <h2>Share: </h2>\n                <FontAwesomeIcon className=\"icon\" icon={faShareAlt} size=\"1x\" />\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"whatsapp\"\n                  href={\n                    \"https://web.whatsapp.com/send?text=Click to Sparty! \" +\n                    encodeURI(window.location.href)\n                  }\n                >\n                  <FontAwesomeIcon\n                    className=\"icon\"\n                    icon={faWhatsapp}\n                    size=\"1x\"\n                  />\n                </a>\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"facebook\"\n                  href={\n                    \"https://www.facebook.com/sharer/sharer.php?u=\" +\n                    window.location.href\n                  }\n                >\n                  <FontAwesomeIcon\n                    className=\"icon\"\n                    icon={faFacebook}\n                    size=\"1x\"\n                  />\n                </a>\n              </div>\n            </div>\n            <div className=\"searchContainer\">\n              <input\n                className=\"spotiSearch\"\n                type=\"search\"\n                placeholder=\"Find the next song\"\n                onChange={e => this.searchSongs(e)}\n              />\n              <p>\n                Matchs: <span>{this.state.foundedSongs.length}</span>\n              </p>\n            </div>\n            <div className=\"searchResults\">\n              {this.state.addedSong && (\n                <div className=\"addedSong\">\n                  <h2>Song added!</h2>\n                </div>\n              )}\n              {this.state.foundedSongs.map((song, idx) => {\n                return (\n                  <div className=\"resultCard\" key={idx}>\n                    <div className=\"songInfo\">\n                      <img\n                        src={song.album.images[1].url}\n                        alt={song.album.name}\n                      />\n                      <button onClick={() => this.addSong(song.uri)}>\n                        Add to Sparty\n                      </button>\n                    </div>\n                    <div className=\"songName\">\n                      <h3>{song.name}</h3>\n                      <h4>{song.artists[0].name}</h4>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </section>\n        );\n      }\n    } else if (this.state.party) {\n      return (\n        <section className=\"Party\">\n          <nav>\n            <button className=\"no-bg\">\n              <Link to=\"/login\">Login</Link>\n            </button>\n          </nav>\n          <h1 className=\"spartyName\">{this.state.party.name}</h1>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={\n              \"https://www.google.com/maps/search/\" + this.state.party.address\n            }\n            className=\"spartyDetails\"\n          >\n            <FontAwesomeIcon className=\"icon\" icon={faMapMarker} size=\"1x\" />:{\" \"}\n            <span>\n              {this.state.party.address}. {this.state.party.addressDetails}.\n            </span>\n          </a>\n          <div className=\"buttonContainer\">\n            <a\n              className=\"spotifyButton\"\n              href={\"spotify:playlist:\" + this.state.party.playlist}\n            >\n              <FontAwesomeIcon className=\"icon\" icon={faSpotify} size=\"1x\" />\n              Check playlist\n            </a>\n          </div>\n          <div className=\"searchContainer\">\n            <input\n              className=\"spotiSearch\"\n              type=\"search\"\n              placeholder=\"Find the next song\"\n              onChange={e => this.searchSongs(e)}\n            />\n            <p>\n              Matchs: <span>{this.state.foundedSongs.length}</span>\n            </p>\n          </div>\n          <div className=\"searchResults\">\n            {this.state.addedSong && (\n              <div className=\"addedSong\">\n                <h2>Song added!</h2>\n              </div>\n            )}\n            {this.state.foundedSongs.map((song, idx) => {\n              return (\n                <div className=\"resultCard\" key={idx}>\n                <div className=\"songInfo\">\n                      <img\n                        src={song.album.images[1].url}\n                        alt={song.album.name}\n                      />\n                      <button onClick={() => this.addSong(song.uri)}>\n                        Add to Sparty\n                      </button>\n                    </div>\n                    <div className=\"songName\">\n                      <h3>{song.name}</h3>\n                      <h4>{song.artists[0].name}</h4>\n                    </div>\n                </div>\n              );\n            })}\n          </div>\n        </section>\n      );\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Link } from \"react-router-dom\";\nimport \"./Edit.scss\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1].split(\"/edit\")[0]\n    };\n\n    this.partyService = new PartyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty })\n      );\n  }\n\n  updateParty(e, field) {\n    let newState = { ...this.state };\n    newState.party[field] = e.target.value;\n    this.setState(newState);\n  }\n  saveChanges() {\n    this.partyService\n      .updateParty(this.state.partyID, this.state.party)\n      .then(_ => this.props.history.push(\"/party/\" + this.state.partyID));\n  }\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n  render() {\n    if (this.state.party && this.state.loggedInUser) {\n      if (this.state.loggedInUser._id === this.state.party.user) {\n        return (\n          <section className=\"Edit\">\n            <nav>\n              <button className=\"no-bg\">\n                <Link to={\"/party/\" + this.state.partyID}>Cancel</Link>\n              </button>\n              <button\n                className=\"no-bg\"\n                onClick={() => this.props.deleteParty(this.state.partyID)}\n              >\n                Delete\n              </button>\n            </nav>\n            <div className=\"form\">\n              <label>Sparty</label>\n              <input\n                type=\"text\"\n                placeholder={this.state.party.name}\n                onChange={e => this.updateParty(e, \"name\")}\n              />\n              <label>Address</label>\n              <input\n                type=\"text\"\n                placeholder={this.state.party.address}\n                onChange={e => this.updateParty(e, \"address\")}\n              />\n              <input\n                type=\"text\"\n                placeholder={this.state.party.addressDetails}\n                onChange={e => this.updateParty(e, \"addressDetails\")}\n              />\n              <button>\n                <h1 onClick={() => this.saveChanges()}>Save changes</h1>\n              </button>\n            </div>\n          </section>\n        );\n      }\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport PartyService from \"../../services/PartyService\";\nimport CreateName from \"./CreateName/CreateName\";\nimport CreateEvent from \"./CreateEvent/CreateEvent\";\nimport Party from \"./Party/Party\";\nimport SpotifyService from \"../../services/SpotifyService\";\nimport Edit from \"./Edit/Edit\";\nimport \"./Create.scss\";\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\n\nclass Create extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      party: {\n        user: this.props.user._id,\n        userToken: this.props.user.token,\n        image_url: `../images/default${randomInt(1,4)}.jpg`\n      },\n      playlistDetails: {\n        public: false,\n        collaborative: true\n      },\n    };\n    this.partyService = new PartyService();\n    this.spotifyService = new SpotifyService();\n  }\n\n  updateName(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.name = e.target.value;\n    newState.playlistDetails.name = e.target.value;\n    newState.playlistDetails.description =\n      e.target.value + \". Made with SpartyTime\";\n    this.setState(newState);\n  }\n  updateAddress(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.address = e.target.value;\n    this.setState(newState);\n  }\n  updateAddressDetails(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.addressDetails = e.target.value;\n    this.setState(newState);\n  }\n\n  createPlaylist() {\n    let newState = {\n      ...this.state\n    };\n    this.spotifyService\n      .createPlaylist(\n        this.state.playlistDetails,\n        this.state.loggedInUser.spotifyID,\n        this.state.loggedInUser.token\n      )\n      .then(createdPlaylist => {\n        newState.party.playlist = createdPlaylist.id;\n      });\n    this.setState(newState);\n  }\n  handleCreateParty() {\n    this.partyService.createParty(this.state.party).then(createdParty =>\n      this.setState(\n        {\n          ...this.state,\n          party: createdParty,\n        },\n        () => this.props.history.push(\"/party/\" + createdParty._id)\n      )\n    );\n  }\n\n  deleteParty(id) {\n    this.partyService\n      .deleteParty(id)\n      .then(_ => this.props.history.push(\"/home\"));\n    \n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          extact\n          path=\"/party/name\"\n          render={() => {\n            return (\n              <CreateName\n                updateName={e => this.updateName(e)}\n                handleCreatePlaylist={() => this.createPlaylist()}\n                party={this.state.party}\n              ></CreateName>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/event\"\n          render={() => {\n            return (\n              <CreateEvent\n                updateAddress={e => this.updateAddress(e)}\n                updateAddressDetails={e => this.updateAddressDetails(e)}\n                party={this.state.party}\n                handleCreateParty={() => this.handleCreateParty()}\n              ></CreateEvent>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id/edit\"\n          render={() => {\n            return (\n              <Edit\n                user={this.state.loggedInUser}\n                deleteParty={id => this.deleteParty(id)}\n                history={this.props.history}\n              ></Edit>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id\"\n          render={() => {\n            return (\n              <Party\n                user={this.state.loggedInUser}\n                deleteParty={id => this.deleteParty(id)}\n              ></Party>\n            );\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(Create);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport AuthService from \"./services/AuthService\";\nimport Create from \"./components/Create/Create\";\nimport Party from \"./components/Create/Party/Party\";\nimport \"./App.scss\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null\n    };\n    this.authservice = new AuthService();\n    this.fetchUser();\n  }\n\n  fetchUser() {\n    return this.authservice\n      .loggedin()\n      .then(response => {\n        this.setState({\n          loggedInUser: response\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loggedInUser: false\n        });\n      });\n  }\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <div className=\"App\">\n          <div className=\"Container\">\n            <Header></Header>\n            <Switch>\n              <Route\n                extact\n                path=\"/home\"\n                render={() => {\n                  return <Home user={this.state.loggedInUser}></Home>;\n                }}\n              />\n              <Route\n                extact\n                path=\"/party\"\n                render={() => {\n                  return (\n                    <Create\n                      user={this.state.loggedInUser}\n                      history={this.props.history}\n                    ></Create>\n                  );\n                }}\n              />\n              <Route\n                extact\n                path=\"/\"\n                render={() => {\n                  return (\n                    <section className=\"Landing\">\n                      <Link to=\"/home\">\n                        <button className=\"SpartyButton\">\n                          <h2>Let's Sparty!</h2>\n                        </button>\n                      </Link>\n                    </section>\n                  );\n                }}\n              />\n            </Switch>\n            <Footer></Footer>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"Container\">\n            <Header></Header>\n            <Switch>\n              <Route\n                extact\n                path=\"/login\"\n                render={() => {\n                  return <Login></Login>;\n                }}\n              />\n              <Route\n                extact\n                path=\"/party/:id\"\n                render={() => {\n                  return <Party user={this.state.loggedInUser}></Party>;\n                }}\n              />\n              <Route\n                extact\n                path=\"/\"\n                render={() => {\n                  return (\n                    <section className=\"Landing\">\n                      <Link to=\"/login\">\n                        <button className=\"SpartyButton\">\n                          <h2>Let's Sparty!</h2>\n                        </button>\n                      </Link>\n                    </section>\n                  );\n                }}\n              />\n            </Switch>\n            <Footer></Footer>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}