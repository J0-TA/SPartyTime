{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","services/AuthService.js","services/PartyService.js","components/Home/Home.js","components/Login/Login.js","components/Create/CreateName/CreateName.js","components/Create/CreateEvent/CreateEvent.js","services/SpotifyService.js","components/Create/Party/Party.js","components/Create/Edit/Edit.js","components/Create/Create.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","Component","Footer","AuthService","loggedin","service","get","then","response","data","logout","this","axios","create","baseURL","process","withCredentials","PartyService","getAllParties","getPartyDetails","id","createParty","party","post","updateParty","put","deleteParty","delete","Home","props","authService","setState","loggedInUser","getUserParties","partyService","allParties","userParties","filter","user","state","_id","updateAccessToken","newState","map","userToken","token","className","onClick","spotifyID","src","photo","alt","username","idx","key","image_url","name","height","Login","href","CreateName","htmlFor","onChange","e","updateName","type","placeholder","handleCreatePlaylist","CreateEvent","updateAddress","updateAddressDetails","updateHour","handleCreateParty","SpotifyService","createPlaylist","playlistDetails","accessToken","myHeaders","headers","searchSongs","query","addSongToPlaylist","song","playlist","console","log","songToAdd","addSongToQueue","Party","partyID","window","location","split","foundedSongs","spotifyService","foundedParty","target","value","tracks","items","address","addressDetails","hour","Fragment","album","images","url","artists","controls","preview_url","addSong","uri","rel","encodeURI","Edit","field","_","history","push","saveChanges","Create","public","collaborative","description","createdPlaylist","createdParty","partyCreated","extact","path","render","withRouter","App","authservice","fetchUser","catch","err","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5f3a1278.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.scss\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Link to=\"/\">\n        <header>\n          <h1>SParty</h1>\n        </header>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Footer.scss\";\n\nexport default class Footer extends Component {\n  render() {\n    return (\n        <footer>\n          <p>Developed at Ironhack by Jota</p>\n        </footer>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class AuthService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n            withCredentials: true\n        });\n    }\n\n    loggedin = () => {\n        return this.service.get('/currentUser', )\n            .then(response => response.data)\n    };\n\n    logout = () => {\n        return this.service.get('/logout', )\n            .then(response => response.data)\n    };\n};","import axios from \"axios\";\n\nexport default class PartyService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `${process.env.REACT_APP_API_URL}/parties`,\n        });\n    }\n    getAllParties = () => {\n        return this.service.get('/all', )\n        .then(response => response.data)\n    };\n\n    getPartyDetails = (id) => {\n        return this.service.get('/' + id, )\n        .then(response => response.data)\n    };\n\n    createParty = (party) => {\n        return this.service.post('/create', party)\n        .then(response => response.data)\n    }\n\n    updateParty = (id, party) => {\n        return this.service.put('/' + id, party)\n        .then(response => response.data)\n    }\n\n    deleteParty = (id) => {\n        return this.service.delete('/' + id, )\n        .then(response => response.data)\n    }\n}","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport PartyService from \"../../services/PartyService\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport \"./Home.scss\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      userParties: []\n    };\n    this.partyService = new PartyService();\n    this.authService = new AuthService();\n  }\n  logout = () => {\n    this.authService.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  getUserParties = () => {\n    this.partyService.getAllParties().then(allParties => {\n      this.setState(\n        {\n          userParties: allParties.filter(\n            party => party.user === this.state.loggedInUser._id\n          )\n        },\n        this.updateAccessToken()\n      );\n    });\n  };\n\n  updateAccessToken() {\n    let newState = { ...this.state };\n    newState.userParties = newState.userParties.map(\n      party => (party.userToken = newState.loggedInUser.token)\n    );\n    this.setState(newState);\n  }\n\n  componentDidMount() {\n    this.getUserParties();\n  }\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <section className=\"Home\">\n          <button className=\"Logout\" onClick={() => this.logout()}>\n            Log Out <span>x</span>\n          </button>\n          <div className=\"dashboard\">\n            <div className=\"userInfo\">\n              <h2> Welcome {this.state.loggedInUser.spotifyID}</h2>\n              <img\n                src={this.state.loggedInUser.photo}\n                alt={this.state.loggedInUser.username}\n              />\n            </div>\n            <div className=\"partiesSlider\">\n              {this.state.userParties.map((party, idx) => {\n                return (\n                  <Link to={\"/party/\" + party._id} key={idx}>\n                    <div className=\"partyIcon\">\n                      <img\n                        src={party.image_url}\n                        alt={party.name}\n                        height=\"100\"\n                      />\n                      <h5>{party.name}</h5>\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"newSparty\">\n            <Link to=\"/party/name\">\n              <button>\n                <h2>New Sparty</h2>\n              </button>\n            </Link>\n          </div>\n        </section>\n      );\n    } else {\n      return <Redirect to=\"/\" />;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport \"./Login.scss\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.service = new AuthService();\n  }\n\n  render() {\n    return (\n      <section>\n        <div>\n          <a href={`${process.env.REACT_APP_API_URL}/auth/spotify`}>\n            Log In with Spotify\n          </a>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./CreateName.scss\";\n\nexport default class CreateName extends Component {\n  render() {\n    return (\n      <section className=\"CreateName\">\n        {this.props.party.name === \"\" ? (\n          <h2>New Sparty</h2>\n        ) : (\n          <h2>{this.props.party.name}</h2>\n        )}\n        <label htmlFor=\"name\">Enter a name for your Sparty!</label>\n        <input\n          onChange={e => this.props.updateName(e)}\n          type=\"text\"\n          placeholder=\"New Sparty\"\n        />\n        <Link to=\"/party/event\">\n          <button onClick={() => this.props.handleCreatePlaylist()}>\n            <h5 className=\"nextButton\">Next</h5>\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./CreateEvent.scss\";\n\nexport default class CreateEvent extends Component {\n  render() {\n    return (\n      <section className=\"CreateEvent\">\n        {this.props.party ? (\n          <h2>{this.props.party.name}</h2>\n        ) : (\n          <h2>New Party</h2>\n        )}\n        <label htmlFor=\"googleAddress\">Main address:</label>\n        <input type=\"search\" onChange={e => this.props.updateAddress(e)} />\n        <label htmlFor=\"addressDeatails\">Address Details:</label>\n        <input\n          onChange={e => this.props.updateAddressDetails(e)}\n          type=\"text\"\n          placeholder=\"Portal, floor, door,...\"\n        />\n        <label htmlFor=\"hour\">Party starts at:</label>\n        <input type=\"time\" onChange={e => this.props.updateHour(e)}></input>\n          <button onClick={() => this.props.handleCreateParty()}>\n            <h5 className=\"nextButton\">Create</h5>\n          </button>\n      </section>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class SpotifyService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `https://api.spotify.com/v1/`\n    });\n  }\n\n  createPlaylist = (playlistDetails, user, accessToken) => {\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    return this.service\n      .post(`users/${user}/playlists`, playlistDetails, {\n        headers: myHeaders\n      })\n      .then(response => response.data);\n  };\n\n  searchSongs = (query, accessToken) => {\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    return this.service\n      .get(`search?q=${query}&type=track&limit=20`, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n  addSongToPlaylist = (song, playlist, accessToken, user) => {\n    console.log(song)\n    console.log(playlist)\n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    const songToAdd = {\n      \"uris\": [song]\n    }\n\n    this.service\n      .post(`users/${user}/playlists/${playlist}/tracks`, songToAdd, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n  addSongToQueue = (song, accessToken) => {\n    console.log(song)\n    console.log(accessToken)\n    \n    const myHeaders = {\n      \"Authorization\": \"Bearer \" + accessToken\n    }\n    this.service\n      .post(`https://api.spotify.com/v1/me/player/queue?uri=${song}`, {\n        headers: myHeaders\n      })\n      .then(response => response.data)\n  }\n}\n\n\n// Esta es la megapetición a axios que se trabajó con Dani, puede que tenga que usarse para\n// refrescar el token y mantener la sesión activa más de una hora\n\n// test() {\n//   axios\n//     .post(\n//       \"https://accounts.spotify.com/api/token\",\n//       querystring.stringify({\n//         grant_type: \"authorization_code\",\n//         code: window.location.href.split(\"code=\")[1],\n//         redirect_uri: `${process.env.REACT_APP_URL}/home/callback`\n//       }),\n//       {\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//           Authorization:\n//             \"Basic YjZiNWExOTRlNmQzNDk2MWIxMjQwZmZjOWQzN2E5MWY6OWQyNzg3M2EwZWEwNGU5NzhjZTRiYTkyZTNjNWI0OTc=\"\n//         }\n//       }\n//     )\n//     .then(tokenData => {\n//       console.log(tokenData);\n\n//     });\n// }\n// ---------------------------------------------------------","import React, { Component } from \"react\";\nimport \"./Party.scss\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Link } from \"react-router-dom\";\nimport SpotifyService from \"../../../services/SpotifyService\";\n\nexport default class Party extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1],\n      foundedSongs: []\n    };\n\n    this.partyService = new PartyService();\n    this.spotifyService = new SpotifyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty })\n      );\n  }\n\n  searchSongs(e) {\n    if (e.target.value === \"\")\n      return this.setState({ ...this.state, foundedSongs: [] });\n    this.spotifyService\n      .searchSongs(e.target.value, this.state.party.userToken)\n      .then(foundedSongs =>\n        this.setState({\n          ...this.state,\n          foundedSongs: foundedSongs.tracks.items\n        })\n      );\n  }\n  addSong(song) {\n    this.spotifyService.addSongToQueue(song, this.state.party.userToken);\n\n    this.spotifyService.addSongToPlaylist(\n      song,\n      this.state.party.playlist,\n      this.state.party.userToken,\n      this.state.party.user\n    );\n\n\n    console.log('added')\n  }\n\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n\n  render() {\n    console.log(this.state);\n    if (this.state.party && this.state.loggedInUser) {\n      if (this.state.loggedInUser._id === this.state.party.user) {\n        return (\n          <section>\n            <nav>\n              <button>\n                <Link to=\"/home\">Back</Link>\n              </button>\n              <button>\n                <Link to={\"/party/\" + this.state.party._id + \"/edit\"}>\n                  Edit\n                </Link>\n              </button>\n              <button\n                onClick={() => this.props.deleteParty(this.state.partyID)}\n              >\n                Delete\n              </button>\n            </nav>\n            <h1>Sparty | {this.state.party.name}</h1>\n            <p>\n              Details: {this.state.party.address}.\n              {this.state.party.addressDetails}, | Hour: {this.state.party.hour}\n            </p>\n            <a href={\"spotify:playlist:\" + this.state.party.playlist}>\n              Check the playlist on Spotify\n            </a>\n            <label htmlFor=\"search\">Search: </label>\n            <input\n              className=\"spotiSearch\"\n              type=\"search\"\n              placeholder=\"Add next song to the queue\"\n              onChange={e => this.searchSongs(e)}\n            />\n            <div className=\"searchResults\">\n              {this.state.foundedSongs.map((song,idx) => {\n                return (\n                  <React.Fragment key={idx}>\n                    <img src={song.album.images[1].url} alt={song.album.name} />\n                    <h3>{song.name}</h3>\n                    <h4>{song.artists[0].name}</h4>\n                    <audio controls>\n                      <source src={song.preview_url}></source>\n                    </audio>\n                    <button onClick={() => this.addSong(song.uri)}>\n                      Add to Sparty\n                    </button>\n                    {/* <a href={song.preview_url}>Play</a> */}\n                  </React.Fragment>\n                );\n              })}\n            </div>\n            <div className=\"socialShare\">\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"whatsapp\"\n                href={\n                  \"https://web.whatsapp.com/send?text=Click to Sparty! \" +\n                  encodeURI(window.location.href)\n                }\n              >\n                Share via Whatsapp\n              </a>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"facebook\"\n                href={\n                  \"https://www.facebook.com/sharer/sharer.php?u=\" +\n                  window.location.href\n                }\n              >\n                Share via facebook\n              </a>\n            </div>\n          </section>\n        );\n      }\n    } else if (this.state.party) {\n      return (\n        <section>\n          <h1>Sparty Name: {this.state.party.name}</h1>\n          <p>Main Address: {this.state.party.address}</p>\n          <p>Details: {this.state.party.addressDetails}</p>\n          <p>Hour: {this.state.party.hour}</p>\n          <a href={\"spotify:playlist:\" + this.state.party.playlist}>\n            Check the playlist on Spotify\n          </a>\n        </section>\n      );\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Link } from \"react-router-dom\";\nimport \"./Edit.scss\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1].split(\"/edit\")[0]\n    };\n\n    this.partyService = new PartyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty })\n      );\n  }\n\n  updateParty(e, field) {\n    let newState = {...this.state};\n    newState.party[field] = e.target.value;\n    this.setState(newState);\n  }\n  saveChanges(){\n    this.partyService.updateParty(this.state.partyID, this.state.party)\n    .then(_ => this.props.history.push(\"/party/\" + this.state.partyID))\n  }\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n  render() {\n    console.log(this.state);\n    if (this.state.party && this.state.loggedInUser) {\n      if (this.state.loggedInUser._id === this.state.party.user) {\n        return (\n          <section>\n            <nav>\n              <button>\n                <Link to={\"/party/\" + this.state.partyID}>Cancel</Link>\n              </button>\n              <button\n                onClick={() => this.props.deleteParty(this.state.partyID)}\n              >\n                Delete\n              </button>\n            </nav>\n\n            <label>Sparty</label>\n            <input\n              type=\"text\"\n              placeholder={this.state.party.name}\n              onChange={e => this.updateParty(e, \"name\")}\n            />\n            <label>Details</label>\n            <input\n              type=\"text\"\n              placeholder={this.state.party.address}\n              onChange={e => this.updateParty(e, \"address\")}\n            />\n            <input\n              type=\"text\"\n              placeholder={this.state.party.addressDetails}\n              onChange={e => this.updateParty(e, \"addressDetails\")}\n            />\n            <input\n              type=\"time\"\n              placeholder={this.state.party.hour}\n              onChange={e => this.updateParty(e, \"hour\")}\n            />\n            <button>\n                <h1 onClick={()=> this.saveChanges()}>Save changes</h1>\n            </button>\n          </section>\n        );\n      }\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport PartyService from \"../../services/PartyService\";\nimport CreateName from \"./CreateName/CreateName\";\nimport CreateEvent from \"./CreateEvent/CreateEvent\";\nimport Party from \"./Party/Party\";\nimport SpotifyService from \"../../services/SpotifyService\";\nimport Edit from \"./Edit/Edit\";\nimport \"./Create.scss\";\n\nclass Create extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      party: {\n        user: this.props.user._id,\n        userToken: this.props.user.token\n      },\n      playlistDetails: {\n        public: false,\n        collaborative: true\n      },\n    };\n    this.partyService = new PartyService();\n    this.spotifyService = new SpotifyService();\n  }\n\n  updateName(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.name = e.target.value;\n    newState.playlistDetails.name = e.target.value;\n    newState.playlistDetails.description =\n      e.target.value + \". Made with SpartyTime\";\n    this.setState(newState);\n  }\n  updateAddress(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.address = e.target.value;\n    this.setState(newState);\n  }\n  updateAddressDetails(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.addressDetails = e.target.value;\n    this.setState(newState);\n  }\n  updateHour(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.hour = e.target.value;\n    this.setState(newState);\n  }\n\n  createPlaylist() {\n    let newState = {\n      ...this.state\n    };\n    this.spotifyService\n      .createPlaylist(\n        this.state.playlistDetails,\n        this.state.loggedInUser.spotifyID,\n        this.state.loggedInUser.token\n      )\n      .then(createdPlaylist => {\n        newState.party.playlist = createdPlaylist.id;\n        newState.party.image_url = createdPlaylist.images[0];\n      });\n    this.setState(newState);\n  }\n  handleCreateParty() {\n    this.partyService.createParty(this.state.party).then(createdParty =>\n      this.setState(\n        {\n          ...this.state,\n          party: createdParty,\n          partyCreated: true\n        },\n        () => this.props.history.push(\"/party/\" + createdParty._id)\n      )\n    );\n  }\n\n  deleteParty(id) {\n    this.partyService\n      .deleteParty(id)\n      .then(_ => this.props.history.push(\"/home\"));\n    \n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          extact\n          path=\"/party/name\"\n          render={() => {\n            return (\n              <CreateName\n                updateName={e => this.updateName(e)}\n                handleCreatePlaylist={() => this.createPlaylist()}\n                party={this.state.party}\n              ></CreateName>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/event\"\n          render={() => {\n            return (\n              <CreateEvent\n                updateAddress={e => this.updateAddress(e)}\n                updateAddressDetails={e => this.updateAddressDetails(e)}\n                updateHour={e => this.updateHour(e)}\n                party={this.state.party}\n                handleCreateParty={() => this.handleCreateParty()}\n              ></CreateEvent>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id/edit\"\n          render={() => {\n            return (\n              <Edit\n                user={this.state.loggedInUser}\n                deleteParty={id => this.deleteParty(id)}\n                history={this.props.history}\n              ></Edit>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id\"\n          render={() => {\n            return (\n              <Party\n                user={this.state.loggedInUser}\n                deleteParty={id => this.deleteParty(id)}\n              ></Party>\n            );\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(Create);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport AuthService from \"./services/AuthService\";\nimport Create from \"./components/Create/Create\";\nimport Party from \"./components/Create/Party/Party\";\nimport \"./styles/App.scss\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null,\n    };\n    this.authservice = new AuthService();\n    this.fetchUser();\n  }\n\n  fetchUser() {\n    return this.authservice\n    .loggedin()\n    .then(response => {\n      this.setState({\n        loggedInUser: response\n      });\n    })\n    .catch(err => {\n      this.setState({\n        loggedInUser: false,\n      });\n    });\n  }\n\n  render() {\n    if(this.state.loggedInUser) {\n      return (\n        <React.Fragment>\n          <Header></Header>\n          <Switch>\n            <Route\n              extact\n              path=\"/home\"\n              render={() => {\n                return <Home user={this.state.loggedInUser}></Home>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/party\"\n              render={() => {\n                return <Create user={this.state.loggedInUser} history={this.props.history}></Create>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/\"\n              render={() => {\n                return (\n                  <Link to=\"/home\">\n                    <button><h2>Let's Sparty!</h2>\n                    </button>\n                  </Link>\n                );\n              }}\n            />\n          </Switch>\n          <Footer></Footer>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Header></Header>\n          <Switch>\n            <Route\n              extact\n              path=\"/login\"\n              render={() => {\n                return <Login></Login>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/party/:id\"\n              render={() => {\n                return <Party user={this.state.loggedInUser}></Party>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/\"\n              render={() => {\n                return (\n                  <Link to=\"/login\">\n                    <button><h2>Let's Sparty!</h2>\n                    </button>\n                  </Link>\n                );\n              }}\n            />\n          </Switch>\n          <Footer></Footer>\n        </React.Fragment>\n      );\n    }   \n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}