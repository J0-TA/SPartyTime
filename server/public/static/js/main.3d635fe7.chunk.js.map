{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","services/AuthService.js","services/PartyService.js","components/Home/Home.js","components/Login/Login.js","components/Create/CreateName/CreateName.js","components/Map/Map.js","components/Create/CreateEvent/CreateEvent.js","components/Create/Party/Party.js","services/SpotifyService.js","components/Create/Edit/Edit.js","components/Create/Create.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","Component","Footer","AuthService","loggedin","service","get","then","response","data","logout","this","axios","create","baseURL","process","withCredentials","PartyService","getAllParties","getPartyDetails","id","createParty","party","post","updateParty","put","deleteParty","delete","Home","props","authService","setState","loggedInUser","getUserParties","partyService","allParties","userParties","filter","user","state","_id","className","onClick","spotifyID","src","photo","alt","username","map","image_url","name","height","Login","href","CreateName","htmlFor","onChange","e","updateName","type","placeholder","handleCreatePlaylist","Geocode","setApiKey","enableDebug","Map","getCity","addressArray","i","length","types","long_name","getArea","j","getState","event","target","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","city","area","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","fromLatLng","results","error","center","nextProps","nextState","AsyncMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","style","width","paddingLeft","marginTop","marginBottom","draggable","onDragEnd","position","onClose","padding","margin","undefined","readOnly","googleMapURL","loadingElement","containerElement","mapElement","React","CreateEvent","updateAddress","updateAddressDetails","updateHour","handleCreateParty","Party","partyID","window","split","foundedParty","addressDetails","hour","playlist","SpotifyService","createPlaylist","playlistDetails","accessToken","myHeaders","headers","Edit","Create","userToken","token","public","collaborative","partyCreated","spotifyService","newState","description","createdPlaylist","images","createdParty","history","push","deletedParty","extact","path","render","withRouter","App","authservice","fetchUser","catch","err","Fragment","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3d635fe7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.scss\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Link to=\"/\">\n        <header>\n          <h1>SParty</h1>\n        </header>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Footer.scss\";\n\nexport default class Footer extends Component {\n  render() {\n    return (\n        <footer>\n          <p>Developed at Ironhack by Jota</p>\n        </footer>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class AuthService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n            withCredentials: true\n        });\n    }\n\n    loggedin = () => {\n        return this.service.get('/currentUser', )\n            .then(response => response.data)\n    };\n\n    logout = () => {\n        return this.service.get('/logout', )\n            .then(response => response.data)\n    };\n};","import axios from \"axios\";\n\nexport default class PartyService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `${process.env.REACT_APP_API_URL}/parties`,\n        });\n    }\n    getAllParties = () => {\n        return this.service.get('/all', )\n        .then(response => response.data)\n    };\n\n    getPartyDetails = (id) => {\n        return this.service.get('/' + id, )\n        .then(response => response.data)\n    };\n\n    createParty = (party) => {\n        return this.service.post('/create', party)\n        .then(response => response.data)\n    }\n\n    updateParty = () => {\n        return this.service.put('/:id', )\n        .then(response => response.data)\n    }\n\n    deleteParty = (id) => {\n        return this.service.delete('/' + id, )\n        .then(response => response.data)\n    }\n}","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport PartyService from \"../../services/PartyService\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport \"./Home.scss\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      userParties: []\n    };\n    this.partyService = new PartyService();\n    this.authService = new AuthService();\n  }\n  logout = () => {\n    this.authService.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  getUserParties = () => {\n    this.partyService.getAllParties().then(allParties => {\n      this.setState({\n        userParties: allParties.filter(\n          party => party.user === this.state.loggedInUser._id\n        )\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.getUserParties();\n  }\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <section className=\"Home\">\n          <button className=\"Logout\" onClick={() => this.logout()}>\n            Log Out <span>x</span>\n          </button>\n          <div className=\"dashboard\">\n            <div className=\"userInfo\">\n              <h2> Welcome {this.state.loggedInUser.spotifyID}</h2>\n              <img\n                src={this.state.loggedInUser.photo}\n                alt={this.state.loggedInUser.username}\n              />\n            </div>\n            <div className=\"partiesSlider\">\n              {this.state.userParties.map(party => {\n                return (\n                  <Link to={'/party/' + party._id}>\n                    <div className=\"partyIcon\">\n                      <img\n                        src={party.image_url}\n                        alt={party.name}\n                        height=\"100\"\n                      />\n                      <h5>{party.name}</h5>\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"newSparty\">\n            <Link to=\"/party/name\">\n              <button>\n                <h2>New Sparty</h2>\n              </button>\n            </Link>\n          </div>\n        </section>\n      );\n    } else {\n      return <Redirect to=\"/\" />;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport \"./Login.scss\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.service = new AuthService();\n  }\n\n  render() {\n    return (\n      <section>\n        <div>\n          <a href={`${process.env.REACT_APP_API_URL}/auth/spotify`}>\n            Log In with Spotify\n          </a>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./CreateName.scss\";\n\nexport default class CreateName extends Component {\n  render() {\n    return (\n      <section className=\"CreateName\">\n        {this.props.party.name === \"\" ? (\n          <h2>New Sparty</h2>\n        ) : (\n          <h2>{this.props.party.name}</h2>\n        )}\n        <label htmlFor=\"name\">Enter a name for your Sparty!</label>\n        <input\n          onChange={e => this.props.updateName(e)}\n          type=\"text\"\n          placeholder=\"New Sparty\"\n        />\n        <Link to=\"/party/event\">\n          <button onClick={() => this.props.handleCreatePlaylist()}>\n            <h5 className=\"nextButton\">Next</h5>\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  InfoWindow,\n  Marker\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyD92RETtqglYn7VNcWrpHUj1F8EQqxjK9c\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n  componentDidMount() {\n    Geocode.fromLatLng(\n      this.state.mapPosition.lat,\n      this.state.mapPosition.lng\n    ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n\n        console.log(\"city\", city, area, state);\n\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address\n    ) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getCity = addressArray => {\n    let city = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (\n        addressArray[i].types[0] &&\n        \"administrative_area_level_2\" === addressArray[i].types[0]\n      ) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n   * Get the area and set the area input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getArea = addressArray => {\n    let area = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if (\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\n            \"locality\" === addressArray[i].types[j]\n          ) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Get the address and set the address input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getState = addressArray => {\n    let state = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (\n          addressArray[i].types[0] &&\n          \"administrative_area_level_1\" === addressArray[i].types[0]\n        ) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n   * This Event triggers when the marker window is closed\n   *\n   * @param event\n   */\n  onInfoWindowClose = event => {};\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  onPlaceSelected = place => {\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: address ? address : \"\",\n      area: area ? area : \"\",\n      city: city ? city : \"\",\n      state: state ? state : \"\",\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      }\n    });\n  };\n  /**\n   * When the marker is dragged you get the lat and long using the functions available from event object.\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\n   * And then set those values in the state.\n   *\n   * @param event\n   */\n  onMarkerDragEnd = event => {\n    console.log(\"event\", event);\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng(),\n      addressArray = [];\n    Geocode.fromLatLng(newLat, newLng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(props => (\n        <GoogleMap\n          google={this.props.google}\n          defaultZoom={this.props.zoom}\n          defaultCenter={{\n            lat: this.state.mapPosition.lat,\n            lng: this.state.mapPosition.lng\n          }}\n        >\n          {/* For Auto complete Search Box */}\n          <Autocomplete\n            style={{\n              width: \"100%\",\n              height: \"40px\",\n              paddingLeft: \"16px\",\n              marginTop: \"2px\",\n              marginBottom: \"100px\"\n            }}\n            onPlaceSelected={this.onPlaceSelected}\n          />\n          {/*Marker*/}\n          <Marker\n            google={this.props.google}\n            name={\"Dolores park\"}\n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{\n              lat: this.state.markerPosition.lat,\n              lng: this.state.markerPosition.lng\n            }}\n          />\n          <Marker />\n          {/* InfoWindow on top of marker */}\n          <InfoWindow\n            onClose={this.onInfoWindowClose}\n            position={{\n              lat: this.state.markerPosition.lat + 0.0018,\n              lng: this.state.markerPosition.lng\n            }}\n          >\n            <div>\n              <span style={{ padding: 0, margin: 0 }}>\n                {this.state.address}\n              </span>\n            </div>\n          </InfoWindow>\n        </GoogleMap>\n      ))\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = (\n        <div>\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">City</label>\n              <input\n                type=\"text\"\n                name=\"city\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.city}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Area</label>\n              <input\n                type=\"text\"\n                name=\"area\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.area}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">State</label>\n              <input\n                type=\"text\"\n                name=\"state\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.state}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Address</label>\n              <input\n                type=\"text\"\n                name=\"address\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.address}\n              />\n            </div>\n          </div>\n          <AsyncMap\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD92RETtqglYn7VNcWrpHUj1F8EQqxjK9c&libraries=places\"\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={<div style={{ height: this.props.height }} />}\n            mapElement={<div style={{ height: `100%` }} />}\n          />\n        </div>\n      );\n    } else {\n      map = <div style={{ height: this.props.height }} />;\n    }\n    return map;\n  }\n}\nexport default Map;\n","import React, { Component } from \"react\";\nimport \"./CreateEvent.scss\";\nimport { Link } from \"react-router-dom\";\nimport Map from \"../../Map/Map\";\n\nexport default class CreateEvent extends Component {\n  render() {\n    return (\n      <section className=\"CreateEvent\">\n        {this.props.party ? (\n          <h2>{this.props.party.name}</h2>\n        ) : (\n          <h2>New Party</h2>\n        )}\n        <label htmlFor=\"googleAddress\">Main address:</label>\n        <input type=\"search\" onChange={e => this.props.updateAddress(e)} />\n        <label htmlFor=\"addressDeatails\">Address Details:</label>\n        <input\n          onChange={e => this.props.updateAddressDetails(e)}\n          type=\"text\"\n          placeholder=\"Portal, floor, door,...\"\n        />\n        <label htmlFor=\"hour\">Party starts at:</label>\n        <input type=\"time\" onChange={e => this.props.updateHour(e)}></input>\n        <Map\n          google={this.props.google}\n          center={{ lat: 40.4164481, lng: -3.7040234 }}\n          height=\"300px\"\n          zoom={12}\n          party={this.props.party}\n        />\n          <button onClick={() => this.props.handleCreateParty()}>\n            <h5 className=\"nextButton\">Create</h5>\n          </button>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Party.scss\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Party extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1]\n    };\n\n    this.partyService = new PartyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty})\n      );\n  }\n\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n  render() {\n    console.log(this.state);\n    if (\n      this.state.party &&\n      this.state.loggedInUser){\n        if (this.state.loggedInUser._id === this.state.party.user) {\n          return (\n            <section>\n              <nav>\n                <button><Link to=\"/home\">Back</Link></button>\n                <button><Link to={\"/party/\" + this.state.party._id + \"/edit\"}>Edit</Link></button>\n                <button onClick={() => this.props.deleteParty(this.state.partyID)}>Delete</button>\n              </nav>\n              <h1>Sparty | {this.state.party.name}</h1>\n              <p>Details: {this.state.party.address}. {this.state.party.addressDetails}, | Hour: {this.state.party.hour}</p>\n              <a href={\"spotify:playlist:\" + this.state.party.playlist}>\n                Check the playlist on Spotify\n              </a>\n              <button><Link to={\"/party/\" + this.state.party._id + \"/share\"}><h1>Share</h1></Link></button>\n            </section>\n          );\n        }\n      } else if (this.state.party) {\n      return (\n        <section>\n          <h1>Sparty Name: {this.state.party.name}</h1>\n          <p>Main Address: {this.state.party.address}</p>\n          <p>Details: {this.state.party.addressDetails}</p>\n          <p>Hour: {this.state.party.hour}</p>\n          <a href={\"spotify:playlist:\" + this.state.party.playlist}>\n            Check the playlist on Spotify\n          </a>\n        </section>\n      );\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import axios from \"axios\";\n\nexport default class SpotifyService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `https://api.spotify.com/v1/`\n    });\n  }\n\n  createPlaylist = (playlistDetails, user, accessToken) => {\n    const myHeaders = {\n        \"Authorization\": \"Bearer \" + accessToken\n    }\n    return this.service\n      .post(`users/${user}/playlists`, playlistDetails, {headers: myHeaders})\n      .then(response => response.data);\n  };\n}\n// Esta es la megapetición a axios que se trabajó con Dani, puede que tenga que usarse para\n// refrescar el token y mantener la sesión activa más de una hora\n\n// test() {\n//   axios\n//     .post(\n//       \"https://accounts.spotify.com/api/token\",\n//       querystring.stringify({\n//         grant_type: \"authorization_code\",\n//         code: window.location.href.split(\"code=\")[1],\n//         redirect_uri: `${process.env.REACT_APP_URL}/home/callback`\n//       }),\n//       {\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//           Authorization:\n//             \"Basic YjZiNWExOTRlNmQzNDk2MWIxMjQwZmZjOWQzN2E5MWY6OWQyNzg3M2EwZWEwNGU5NzhjZTRiYTkyZTNjNWI0OTc=\"\n//         }\n//       }\n//     )\n//     .then(tokenData => {\n//       console.log(tokenData);\n\n//     });\n// }\n// ---------------------------------------------------------\n","import React, { Component } from \"react\";\nimport \"./Edit.scss\";\nimport PartyService from \"../../../services/PartyService\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedInUser: this.props.user,\n      partyID: window.location.href.split(\"party/\")[1].split(\"/edit\")[0]\n    };\n\n    this.partyService = new PartyService();\n  }\n\n  getPartyDetails() {\n    this.partyService\n      .getPartyDetails(this.state.partyID)\n      .then(foundedParty =>\n        this.setState({ ...this.state, party: foundedParty })\n      );\n  }\n\n  componentDidMount() {\n    this.getPartyDetails();\n  }\n  render() {\n    if (this.state.party && this.state.loggedInUser) {\n      if (this.state.loggedInUser._id === this.state.party.user) {\n        return (\n          <section>\n            <nav>\n              <button>\n                <Link to={\"/party/\" + this.state.partyID}>Cancel</Link>\n              </button>\n              <button>\n                <Link to={\"/party/\" + this.state.party._id + \"edit\"}>\n                  Save changes\n                </Link>\n              </button>\n              <button>Delete</button>\n            </nav>\n            <h1>Sparty | {this.state.party.name}</h1>\n            <p>\n              Details: {this.state.party.address}.{\" \"}\n              {this.state.party.addressDetails}, | Hour: {this.state.party.hour}\n            </p>\n            <a href={\"spotify:playlist:\" + this.state.party.playlist}>\n              Check the playlist on Spotify\n            </a>\n            <button>\n              <Link to={\"/party/\" + this.state.party._id + \"share\"}>\n                <h1>Share</h1>\n              </Link>\n            </button>\n          </section>\n        );\n      }\n    } else return <h1>Loading...</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport PartyService from \"../../services/PartyService\";\nimport CreateName from \"./CreateName/CreateName\";\nimport CreateEvent from \"./CreateEvent/CreateEvent\";\nimport Party from \"./Party/Party\";\nimport SpotifyService from \"../../services/SpotifyService\";\nimport \"./Create.scss\";\nimport Edit from \"./Edit/Edit\";\n\nclass Create extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: this.props.user,\n      party: {\n        user: this.props.user._id,\n        userToken: this.props.user.token\n      },\n      playlistDetails: {\n        public: false,\n        collaborative: true\n      },\n      partyCreated: null\n    };\n    this.partyService = new PartyService();\n    this.spotifyService = new SpotifyService();\n  }\n\n  updateName(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.name = e.target.value;\n    newState.playlistDetails.name = e.target.value;\n    newState.playlistDetails.description =\n      e.target.value + \". Made with SpartyTime\";\n    this.setState(newState);\n  }\n  updateAddress(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.address = e.target.value;\n    this.setState(newState);\n  }\n  updateAddressDetails(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.addressDetails = e.target.value;\n    this.setState(newState);\n  }\n  updateHour(e) {\n    let newState = {\n      ...this.state\n    };\n    newState.party.hour = e.target.value;\n    this.setState(newState);\n  }\n\n  createPlaylist() {\n    let newState = {\n      ...this.state\n    };\n    this.spotifyService\n      .createPlaylist(\n        this.state.playlistDetails,\n        this.state.loggedInUser.spotifyID,\n        this.state.loggedInUser.token\n      )\n      .then(createdPlaylist => {\n        newState.party.playlist = createdPlaylist.id;\n        newState.party.image_url = createdPlaylist.images[0];\n      });\n    this.setState(newState);\n  }\n  handleCreateParty() {\n    this.partyService.createParty(this.state.party).then(createdParty =>\n      this.setState(\n        {\n          ...this.state,\n          party: createdParty,\n          partyCreated: true\n        },\n        () => this.props.history.push(\"/party/\" + createdParty._id)\n      )\n    );\n  }\n\n  deleteParty(id) {\n    this.partyService.deleteParty(id).then(deletedParty => console.log(deletedParty));\n    this.props.history.push(\"/home\")\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          extact\n          path=\"/party/name\"\n          render={() => {\n            return (\n              <CreateName\n                updateName={e => this.updateName(e)}\n                handleCreatePlaylist={() => this.createPlaylist()}\n                party={this.state.party}\n              ></CreateName>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/event\"\n          render={() => {\n            return (\n              <CreateEvent\n                updateAddress={e => this.updateAddress(e)}\n                updateAddressDetails={e => this.updateAddressDetails(e)}\n                updateHour={e => this.updateHour(e)}\n                party={this.state.party}\n                handleCreateParty={() => this.handleCreateParty()}\n              ></CreateEvent>\n            );\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id/edit\"\n          render={() => {\n            return <Edit user={this.state.loggedInUser}> </Edit>;\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id/share\"\n          render={() => {\n            return <h1> Share page </h1>;\n          }}\n        />\n        <Route\n          extact\n          path=\"/party/:id\"\n          render={() => {\n            return (\n              <Party\n                user={this.state.loggedInUser}\n                deleteParty={id => this.deleteParty(id)}\n              >\n              </Party>\n            );\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(Create);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport AuthService from \"./services/AuthService\";\nimport PartyService from \"./services/PartyService\";\nimport Create from \"./components/Create/Create\";\nimport \"./styles/App.scss\";\nimport Party from \"./components/Create/Party/Party\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null,\n    };\n    this.authservice = new AuthService();\n    this.fetchUser();\n  }\n\n  // getUser = userObj => {\n  //   this.setState({\n  //     loggedInUser: userObj\n  //   });\n  // };\n\n  fetchUser() {\n    return this.authservice\n    .loggedin()\n    .then(response => {\n      this.setState({\n        loggedInUser: response\n      });\n    })\n    .catch(err => {\n      this.setState({\n        loggedInUser: false,\n      });\n    });\n  }\n\n  render() {\n    if(this.state.loggedInUser) {\n      return (\n        <React.Fragment>\n          <Header></Header>\n          <Switch>\n            <Route\n              extact\n              path=\"/home\"\n              render={() => {\n                return <Home user={this.state.loggedInUser}></Home>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/party\"\n              render={() => {\n                return <Create user={this.state.loggedInUser} history={this.props.history}></Create>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/\"\n              render={() => {\n                return (\n                  <Link to=\"/home\">\n                    <button><h2>Let's Sparty!</h2>\n                    </button>\n                  </Link>\n                );\n              }}\n            />\n          </Switch>\n          <Footer></Footer>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Header></Header>\n          <Switch>\n            <Route\n              extact\n              path=\"/login\"\n              render={() => {\n                return <Login></Login>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/party/:id\"\n              render={() => {\n                return <Party user={this.state.loggedInUser}></Party>;\n              }}\n            />\n            <Route\n              extact\n              path=\"/\"\n              render={() => {\n                return (\n                  <Link to=\"/login\">\n                    <button><h2>Let's Sparty!</h2>\n                    </button>\n                  </Link>\n                );\n              }}\n            />\n          </Switch>\n          <Footer></Footer>\n        </React.Fragment>\n      );\n    }   \n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}