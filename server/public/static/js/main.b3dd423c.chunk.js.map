{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","services/AuthService.js","components/Home/Home.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","Component","Footer","AuthService","login","service","get","then","response","data","loggedin","logout","this","axios","create","baseURL","process","withCredentials","Home","props","post","querystring","stringify","grant_type","code","window","location","href","split","redirect_uri","headers","Authorization","tokenData","console","log","user","Login","handleLogin","state","App","getUser","userObj","setState","loggedInUser","fetchUser","catch","err","Fragment","extact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kWAIqBA,G,uLAEjB,OACE,kBAAC,IAAD,CAAMC,GAAG,KACP,gCACE,gD,GAL0BC,cCDfC,G,uLAEjB,OACI,gCACE,iE,GAJ0BD,c,yBCDfE,EACjB,aAAe,IAAD,gCAOdC,MAAQ,WACJ,OAAO,EAAKC,QAAQC,IAAI,YACnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SATrB,KAYdC,SAAW,WACP,OAAO,EAAKL,QAAQC,IAAI,gBACnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAdrB,KAiBdE,OAAS,WACL,OAAO,EAAKN,QAAQC,IAAI,WACnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAlB/BG,KAAKP,QAAUQ,IAAMC,OAAO,CACxBC,QAAQ,GAAD,OAAKC,4BAAL,SACPC,iBAAiB,K,iBCARC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDd,QAAU,IAAIF,EAHF,E,oEAOjBU,IACGO,KACC,yCACAC,IAAYC,UAAU,CACpBC,WAAY,qBACZC,KAAMC,OAAOC,SAASC,KAAKC,MAAM,SAAS,GAC1CC,aAAa,GAAD,OAAKb,wBAAL,oBAEd,CACEc,QAAS,CACP,eAAgB,oCAChBC,cACE,oGAIPxB,MAAK,SAAAyB,GACJC,QAAQC,IAAIF,Q,+BAOhB,OADAC,QAAQC,IAAItB,KAAKO,MAAMgB,MAErB,6BACE,mD,GAlC0BlC,aCFbmC,G,kBACnB,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAIRkB,YAAc,aAHZ,EAAKC,MAAQ,GACb,EAAKjC,QAAU,IAAIF,EAHF,E,sEAUjB,OACE,iCACE,6BAIE,uBAAGwB,KAAI,UAAKX,4BAAL,kBAAP,6B,GAjByBf,cCMdsC,G,kBACnB,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KASRqB,QAAU,SAAAC,GACR,EAAKC,SAAS,CACZC,aAAcF,KAZC,EAgBnB9B,OAAS,WACP,EAAKN,QAAQM,SAASJ,MAAK,WACzB,EAAKmC,SAAS,CAAEC,aAAc,WAhBhC,EAAKL,MAAQ,CACXK,aAAc,MAEhB,EAAKtC,QAAU,IAAIF,EAEnB,EAAKyC,YAPY,E,yEAsBN,IAAD,OACV,OAAOhC,KAAKP,QACXK,WACAH,MAAK,SAAAC,GACJ,EAAKkC,SAAS,CACZC,aAAcnC,IAEhByB,QAAQC,IAAI,EAAKI,MAAMK,iBAExBE,OAAM,SAAAC,GACL,EAAKJ,SAAS,CACZC,cAAc,S,+BAKV,IAAD,OACP,OACE,kBAAC,IAAMI,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAM,EACNC,KAAK,QACLC,OAAQ,WACN,OAAO,kBAAC,EAAD,CAAMf,KAAM,EAAKG,MAAMK,kBAGlC,kBAAC,IAAD,CACEK,QAAM,EACNC,KAAK,SACLC,OAAQ,WACN,OAAO,kBAAC,EAAD,SAGX,kBAAC,IAAD,CACEF,QAAM,EACNC,KAAK,IACLC,OAAQ,WACN,OACE,kBAAC,IAAD,CAAMlD,GAAG,SACP,qDAMV,kBAAC,EAAD,W,GAtEyBC,cCEbkD,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2D,MCXNC,IAASJ,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBK,SAASC,eAAe,SD4H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.b3dd423c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.scss\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Link to=\"/\">\n        <header>\n          <h1>SPartyTime</h1>\n        </header>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Footer.scss\";\n\nexport default class Footer extends Component {\n  render() {\n    return (\n        <footer>\n          <p>Developed at Ironhack by Jota</p>\n        </footer>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport default class AuthService {\n    constructor() {\n        this.service = axios.create({\n            baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n            withCredentials: true\n        });\n    }\n\n    login = () => {\n        return this.service.get('/spotify', )\n            .then(response => response.data)\n    };\n\n    loggedin = () => {\n        return this.service.get('/currentUser', )\n            .then(response => response.data)\n    };\n\n    logout = () => {\n        return this.service.get('/logout', )\n            .then(response => response.data)\n    };\n};","import React, { Component } from \"react\";\nimport \"./Home.scss\";\nimport AuthService from \"../../services/AuthService\";\nimport axios from \"axios\";\nimport querystring from \"querystring\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.service = new AuthService();\n  }\n\n  test() {\n    axios\n      .post(\n        \"https://accounts.spotify.com/api/token\",\n        querystring.stringify({\n          grant_type: \"authorization_code\",\n          code: window.location.href.split(\"code=\")[1],\n          redirect_uri: `${process.env.REACT_APP_URL}/home/callback`\n        }),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            Authorization:\n              \"Basic YjZiNWExOTRlNmQzNDk2MWIxMjQwZmZjOWQzN2E5MWY6OWQyNzg3M2EwZWEwNGU5NzhjZTRiYTkyZTNjNWI0OTc=\"\n          }\n        }\n      )\n      .then(tokenData => {\n        console.log(tokenData);\n\n      });\n  }\n\n  render() {\n    console.log(this.props.user)\n    return (\n      <div>\n        <h1> I 'm the home</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../../services/AuthService\";\nimport \"./Login.scss\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.service = new AuthService();\n  }\n  handleLogin = () => {\n    // this.service.login()\n  };\n\n  render() {\n    return (\n      <section>\n        <div>\n          {/* <button onClick={() => this.handleLogin()}>\n            Log In with Spotify\n          </button> */}\n          <a href={`${process.env.REACT_APP_API_URL}/auth/spotify`}>\n            Log In with Spotify\n          </a>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport AuthService from \"./services/AuthService\";\nimport \"./styles/App.scss\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null\n    };\n    this.service = new AuthService();\n\n    this.fetchUser();\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj\n    });\n  };\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  fetchUser() {\n    return this.service\n    .loggedin()\n    .then(response => {\n      this.setState({\n        loggedInUser: response\n      });\n      console.log(this.state.loggedInUser)\n    })\n    .catch(err => {\n      this.setState({\n        loggedInUser: false,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header></Header>\n        <Switch>\n          <Route\n            extact\n            path=\"/home\"\n            render={() => {\n              return <Home user={this.state.loggedInUser}></Home>;\n            }}\n          />\n          <Route\n            extact\n            path=\"/login\"\n            render={() => {\n              return <Login></Login>;\n            }}\n          />\n          <Route\n            extact\n            path=\"/\"\n            render={() => {\n              return (\n                <Link to=\"/home\">\n                  <button>Let's Party!</button>\n                </Link>\n              );\n            }}\n          />\n        </Switch>\n        <Footer></Footer>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}